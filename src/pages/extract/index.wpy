<style lang="less">
page {
  background-color: #efefef;
  height: 100%;
}

.content {
  // height: 75vh;
  margin-top: 16px;
  min-height: 50vh;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #efefef;
}
.menuContainer {
  display: flex;
  justify-content: flex-start;
  width: 100%;
  margin-left: 24px;
}
.moreApp {
  margin-left: 24px;
  .applist {
    margin-bottom: 8px;
    margin-top: 8px;
    width: 100%;
    white-space: nowrap;
  }

  .appItem {
    margin-left: 16px;
    display: inline-block;
    text-align: center;
    width: 128px;
    height: 128px;
  }
}
</style>
<template>
  <view style="height: 100%">
    <view bindtap="tapCard" class="content">
      <cardItem :item.sync="item"></cardItem>
      <!-- <cardItem wx:if="{{item.item_id > 0}}" :item.sync="item"></cardItem> -->

      <i-toast id="toast" />
    </view>
    <view class="menuContainer">
      <i-button bindtap="toggleTranslate">简繁转换</i-button>
    </view>
    <view class="moreApp">
      <view style="margin-left: 16px">
        <view>💡 更多有趣的小程序</view>
      </view>
      <scroll-view
        style=""
        wx-if="appList.length>0"
        class="applist"
        scroll-x="true"
        scroll-left="60"
      >
        <view class="appItem" wx:for="{{appList}}" wx:for-item="app">
          <block>
            <image
              bindtap="gotoApp({{ app.appId }},{{ app.path }})"
              src="{{app.icon}}"
              mode="aspectFit"
              style="width: 128px; height: 128px; border-radius: 20px"
            ></image>
            <view style="text-align: center; width: 128px">{{ app.name }}</view>
          </block>
        </view>
      </scroll-view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import cardItem from '../../components/extract/card_item';
import { parse } from 'leancloud-storage';

const { $Toast } = require('../../components/iview/base/index');
const AV = require('leancloud-storage');
import { Translate } from '../../libs/wordsTranslate.min.js';
export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '摘录',
    enablePullDownRefresh: true,
    usingComponents: {
      'i-toast': '../../components/iview/toast/index',
      'i-button': '../../components/iview/button/index',
    },
  };
  components = {
    cardItem: cardItem,
  };

  mixins = [];

  data = {
    itemList: [],
    item: {},
    isTranslatable: true,
    appList: [],
  };

  computed = {};

  methods = {
    gotoApp(appId, path) {
      wx.navigateToMiniProgram({
        appId,
        path,
      });
    },
    // 切换简繁体
    toggleTranslate() {
      wx.showLoading({
        title: '转换中',
      });
      console.log('123');
      const translate = new Translate();
      this.item.content = this.item.content.map((t) => {
        return this.isTranslatable
          ? translate.ToSimplifiedChinese(t)
          : translate.ToTraditionalChinese(t);
      });

      this.isTranslatable = !this.isTranslatable;
      this.item.author = translate.ToSimplifiedChinese(this.item.author);
      console.log('this.item', this.item);
      wx.hideLoading();
    },
    tapCard() {
      this.getItem();
    },
  };

  events = {};

  
  async onLoad() {
    wepy.showShareMenu();
    this.getRandItem();
    wx.request({
      url: 'https://service-goz3ffig-1311979162.gz.apigw.tencentcs.com/release/more',
      success: (res) => {
        console.log('res', res.data);
        const appList = res.data.map((item) => {
          return {
            ...item,
            background: `url("${item['background']}") 0% 0% / 100% 100%`,
          };
        });
        this.appList = appList;
      },
    });
    this.$apply();
  }

  onPullDownRefresh() {
    this.getRandItem();
    this.$apply();
    wepy.stopPullDownRefresh();
  }

  onShareAppMessage(option) {
    let title = this.item.author;
    let path = '/pages/extract/index';
    return {
      title: title,
      path: path,
    };
  }

  getRandItem() {
    $Toast({
      content: '加载中...',
      type: 'loading',
    });
    let that = this;
    let query = new AV.Query('poetry');
    // query.limit(30);
    query.skip(parseInt(Math.random() * 100000));
    query.first();
    query
      .first()
      .then(function (result) {
        const item = result.toJSON();
        // console.log('wt',WT);
        // const translate = new Translate();
        const content = item.content.split('|');
        // const content = item.content.split('|');
        console.log('content', content);
        let seed = parseInt(Math.random() * content.length - 1);
        item['content'] = content[seed].split('，');
        that.item = item;
        that.randomItem();
        that.$apply();
        $Toast.hide();
      })
      .catch(function (error) {
        $Toast.hide();
        console.error('error123', error);
      });
  }

  getItem() {
    if (this.item) {
      $Toast({
        content: '加载中...',
        type: 'loading',
      });
      let that = this;
      let query = null;
      console.log('type', that.item);
      // if (that.item.type === 0) {
      //   // 诗
      //   query = new AV.Query('poetry');
      // } else if (that.item.type === 1) {
      //   // 词
      //   query = new AV.Query('poems');
      // }
      query = new AV.Query('poetry');
      if (query) {
        query.equalTo('id', that.item.id);
        query
          .find()
          .then(function (results) {
            console.log(results);
            if (results.length > 0) {
              let jsonText = '';
              let value = results[0].toJSON();
              let jsonValue = {
                item_title: value.title,
                item_author:
                  (value.dynasty === 'T' ? '[唐]' : '[宋]') + value.author,
                item_content: value.content.split('|').join('\n'),
                item_type: 0,
                item_author_id: value.author_id,
              };
              jsonText = escape(JSON.stringify(jsonValue));
              wepy.navigateTo({
                url: '/pages/library/item_detail?value=' + jsonText,
              });
            }
            $Toast.hide();
          })
          .catch(function (error) {
            $Toast.hide();
            console.error(error);
          });
      }
    }
  }

  randomItem() {
    if (this.itemList.length > 0) {
      let index = this.randomNum(0, this.itemList.length - 1);
      console.log(index, this.itemList[index]);
      this.item = this.itemList[index];
    }
  }

  randomNum(min, max) {
    switch (arguments.length) {
      case 1:
        return parseInt(Math.random() * min + 1, 10);
      case 2:
        return parseInt(Math.random() * (max - min + 1) + min, 10);
      default:
        return 0;
    }
  }
}
</script>
