<style lang="less">
.top-content {
  height: 42px;
}
</style>
<template>
  <view>
    <view class="container">
      <!--tab模块-->
      <i-tabs current="{{ current }}" fixed bindchange="handleChange">
        <repeat for="{{tabs}}" gkey="index" index="index" item="item">
          <i-tab key="{{index}}" title="{{item}}"></i-tab>
        </repeat>
      </i-tabs>
      <view class="top-content"></view>

      <view style="height:24px;margin: 16px;display: flex;justify-content: space-between;align-items: center;" >
        <i-input
          bind:change="searchhandleChange"
          value="{{ searchText }}"
          maxlength="50"
          type="text"
          placeholder="输入你想查询的内容~"
        />
        <i-icon bindtap="search" type="search" size="24" color="#80848f" />
      </view>
      <!--诗-->
      <poetryItem
        wx:if="{{current === '0'}}"
        :itemList.sync="poetryList"
      ></poetryItem>
      <!--词-->
      <poemItem
        wx:if="{{current === '1'}}"
        :itemList.sync="poemList"
      ></poemItem>
      <!--论语-->
      <analectsItem
        wx:if="{{current === '2'}}"
        :itemList.sync="analectsList"
      ></analectsItem>
      <!--诗经-->
      <songsItem
        wx:if="{{current === '3'}}"
        :itemList.sync="songsList"
      ></songsItem>

      <i-load-more
        tip="{{isLoading?'正在加载...':''}}"
        loading="{{ isLoading }}"
      />
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import poetryItem from '../../components/library/poetry_item';
import poemItem from '../../components/library/poem_item';
import analectsItem from '../../components/library/analects_item';
import songsItem from '../../components/library/songs_item';
import { Translate } from '../../libs/wordsTranslate.min.js';
const AV = require('leancloud-storage');

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '文库',
    enablePullDownRefresh: true,
    usingComponents: {
      'i-tabs': '../../components/iview/tabs/index',
      'i-tab': '../../components/iview/tab/index',
      'i-load-more': '../../components/iview/load-more/index',
      'i-input': '../../components/iview/input/index',
      'i-icon': '../../components/iview/icon/index',
    },
  };

  components = {
    poetryItem: poetryItem,
    poemItem: poemItem,
    analectsItem: analectsItem,
    songsItem: songsItem,
  };

  mixins = [];

  data = {
    current: '0',
    pageSize: 30,
    tabs: ['诗', '词', '论语', '诗经'],
    poetryList: [],
    poemList: [],
    analectsList: [],
    songsList: [],
    isLoadMore: false,
    isLoading: false,
    searchText:'',
  };

  computed = {};

  methods = {
     search() {
      let that = this;
      if(that.searchText==''){
        return;
      }
      const translate = new Translate();
      wepy.showNavigationBarLoading();
      let type = 'poems';
      console.log('search');
      switch(that.current) {
        case '0':
          type = 'poetry'
          break;
        case '1':
          type = 'poems'
          break
        case '2':
          type = 'lunyu'
          break
        case '3':
          type = 'shijing'
          break
      }
      let query = new AV.SearchQuery(type);
      query.queryString(translate.ToSimplifiedChinese(this.searchText));
      query.find().then(function(results) {
        console.log("Find " + query.hits() + " docs.");
        let items = [];
        for (let item of results) {
          let value = item.toJSON();
          if (!value.content) {
            continue;
          }
          let jsonValue = {
            item_title: value.title,
            item_author: value.author,
            item_content: value.content.split('|').join('\n'),
            item_type: 1,
            item_author_id: value.author_id,
          };
          let jsonText = JSON.stringify(jsonValue);
          value.jsonText = escape(jsonText);
          if (value.content.length > 0) {
            let array = value.content.split('|');
            if (array.length > 0) {
              value.shortContent = array[0]; 
            }
          } else {
            value.shortContent = '暂无内容';
          }
          items.push(value);
        }
        
        switch(that.current) {
        case '0':
           that.poetryList = [ ...items];
          break;
        case '1':
           that.poemList = [, ...items];
          break
        case '2':
           that.analectsList = [ ...items];
          break
        case '3':
          that.songsList = [ ...items];
          break;
      }
         that.stopRefresh();

      }).catch(function(err){
        //处理 err
        that.stopRefresh();
        console.error(error);
      });
      
    },
    searchhandleChange({detail}){
      this.searchText = detail.detail.value;
    },
    handleChange({ detail }) {
      this.searchText  = '';
      this.current = detail.key;
      this.isLoadMore = false;
      this.isLoading = false;
      this.$apply();
      if (this.current === '0') {
        // 诗
        if (this.poetryList.length === 0) {
          this.getPoetryList();
        }
      } else if (this.current === '1') {
        // 词
        console.log(this.poemList.length);
        if (this.poemList.length === 0) {
          this.getPoemList();
        }
      } else if (this.current === '2') {
        // 论语
        if (this.analectsList.length === 0) {
          this.getAnalectsList();
        }
      } else if (this.current === '3') {
        // 诗经
        if (this.songsList.length === 0) {
          this.getSongsList();
        }
      }
    },
  };

  events = {};

  async onLoad() {
    this.getPoetryList();
    this.$apply();
  }

  onPullDownRefresh() {
    this.searchText = '';
    this.isLoadMore = false;
    this.isLoading = false;

    if (this.current === '0') {
      // 诗
      this.getPoetryList();
    } else if (this.current === '1') {
      // 词
      this.getPoemList();
    } else if (this.current === '2') {
      // 论语
      this.getAnalectsList();
    } else if (this.current === '3') {
      // 诗经
      this.getSongsList();
    }
  }

  onReachBottom() {
    this.isLoading = true;
    this.isLoadMore = true;
    if (this.current === '0') {
      // 诗
      this.getPoetryList();
    } else if (this.current === '1') {
      // 词
      this.getPoemList();
    } else if (this.current === '2') {
      // 论语
      this.getAnalectsList();
    } else if (this.current === '3') {
      // 诗经
      this.getSongsList();
    }
  }

  /**
   * 获取诗数据列表
   */
  getPoetryList() {
    wepy.showNavigationBarLoading();
    let that = this;
    if (!that.isLoadMore) that.poetryList = [];
    let query = new AV.Query('poetry');
    query.limit(that.pageSize);
    if (that.poetryList.length > 0) {
      let poetry = that.poetryList[that.poetryList.length - 1];
      query.greaterThan('createdAt', new Date(poetry.createdAt));
    }
    query
      .find()
      .then(function (results) {
        console.log(results);
        let items = [];
        for (let item of results) {
          let value = item.toJSON();
          let jsonValue = {
            item_title: value.title,
            item_author:
              (value.dynasty === 'T' ? '[唐]' : '[宋]') + value.author,
            item_content: value.content.split('|').join('\n'),
            item_type: 0,
            item_author_id: value.author_id,
          };
          let jsonText = JSON.stringify(jsonValue);
          value.jsonText = escape(jsonText);
          if (value.content.length > 0) {
            let array = value.content.split('|');
            if (array.length > 0) {
              value.shortContent = array[0];
            }
          } else {
            value.shortContent = '暂无内容';
          }
          items.push(value);
        }

        that.poetryList = [...that.poetryList, ...items];
        that.stopRefresh();
      })
      .catch(function (error) {
        that.stopRefresh();
        console.error(error);
      });
  }

  /**
   * 获取词数据列表
   */
  getPoemList() {
    wepy.showNavigationBarLoading();
    let that = this;
    if (!that.isLoadMore) that.poemList = [];
    let query = new AV.Query('poems');
    query.limit(that.pageSize);
    if (that.poemList.length > 0) {
      let poem = that.poemList[that.poemList.length - 1];
      query.greaterThan('createdAt', new Date(poem.createdAt));
    }
    query
      .find()
      .then(function (results) {
        // console.log('获取词数据列表', results);
        let items = [];
        for (let item of results) {
          let value = item.toJSON();
          if (!value.content) {
            continue;
          }
          // console.log('item', value);
          let jsonValue = {
            item_title: value.title,
            item_author: value.author,
            item_content: value.content.split('|').join('\n'),
            item_type: 1,
            item_author_id: value.author_id,
          };
          let jsonText = JSON.stringify(jsonValue);
          value.jsonText = escape(jsonText);
          if (value.content.length > 0) {
            let array = value.content.split('|');
            if (array.length > 0) {
              value.shortContent = array[0];
            }
          } else {
            value.shortContent = '暂无内容';
          }
          items.push(value);
        }
        that.poemList = [...that.poemList, ...items];
        that.stopRefresh();
      })
      .catch(function (error) {
        that.stopRefresh();
        console.error(error);
      });
  }

  /**
   * 获取论语数据列表
   */
  getAnalectsList() {
    wepy.showNavigationBarLoading();
    let that = this;
    if (!that.isLoadMore) that.analectsList = [];
    let query = new AV.Query('lunyu');
    query.limit(that.pageSize);
    if (that.analectsList.length > 0) {
      let analects = that.analectsList[that.analectsList.length - 1];
      query.greaterThan('createdAt', new Date(analects.createdAt));
    }
    query
      .find()
      .then(function (results) {
        console.log(results);
        let items = [];
        for (let item of results) {
          let value = item.toJSON();
          let jsonValue = {
            item_title: value.chapter,
            item_author: null,
            item_content: value.content.split('|').join('\n'),
            item_type: 2,
            item_author_id: 0,
          };
          let jsonText = JSON.stringify(jsonValue);
          value.jsonText = escape(jsonText);
          if (value.content.length > 0) {
            let array = value.content.split('|');
            if (array.length > 0) {
              value.shortContent = array[0];
            }
          } else {
            value.shortContent = '暂无内容';
          }
          items.push(value);
        }

        that.analectsList = [...that.analectsList, ...items];
        that.stopRefresh();
      })
      .catch(function (error) {
        that.stopRefresh();
        console.error(error);
      });
  }

  /**
   * 获取诗经数据列表
   */
  getSongsList() {
    wepy.showNavigationBarLoading();
    let that = this;
    if (!that.isLoadMore) that.songsList = [];
    let query = new AV.Query('shijing');
    query.limit(that.pageSize);
    if (that.songsList.length > 0) {
      let songs = that.songsList[that.songsList.length - 1];
      query.greaterThan('createdAt', new Date(songs.createdAt));
    }
    query
      .find()
      .then(function (results) {
        console.log(results);
        let items = [];
        for (let item of results) {
          let value = item.toJSON();
          if (!value.content) {
            continue;
          }
          let jsonValue = {
            item_title: value.title,
            item_author: '[先秦]诗经',
            item_content: value.content.split('|').join('\n'),
            item_type: 3,
            item_author_id: 0,
          };
          let jsonText = JSON.stringify(jsonValue);
          value.jsonText = escape(jsonText);
          if (value.content.length > 0) {
            let array = value.content.split('|');
            if (array.length > 0) {
              value.shortContent = array[0];
            }
          } else {
            value.shortContent = '暂无内容';
          }
          items.push(value);
        }

        that.songsList = [...that.songsList, ...items];
        that.stopRefresh();
      })
      .catch(function (error) {
        that.stopRefresh();
        console.error(error);
      });
  }

  stopRefresh() {
    this.isLoading = false;
    wepy.stopPullDownRefresh();
    wepy.hideNavigationBarLoading();
    this.$apply();
  }
}
</script>
